Lab 4:
parse the fasta file and create data like lab 3

Need to create:
   inIsoform(DNAFrag frag) in main class        // locates which isoform the sequence is in
   whichRecords(DNAFrag frag) in Isoform class  // returns which introns/exons the sequence is contained in.
   nucleoCompo(string dna) in main class        // nucleotide composition: num A/T/C/G
   skip() in main class                         //checks if a substring has n in it. return true if n is found, false otherwise
   geneGen(int size)                            // option 1: create all possibilities of size requested. 4^n values are generated.
                                                               This will fail at large numbers...plus take forever
   geneTrans(int value)                         // option 2: take a value and translate it into a string. (base 5) <-- this reduces 1 parameter
                                                               A=1, T=2, G=3, C=4; AA=11, AT=12, AG=13, AC=14, TA=21, etc.
                                                               initial value= 1,6,31,156
                                                               // int start = 1, value = 1; for (int i=1, int value = 1; i<startRange; i++, start+=value) value += value << 2;
                                                               // int stop = start; for (int i=startRange; i<stopRange; i++) stop += 1<<(2*i);

startRange = 2
stopRange = 3

10 = 5
1201 = 1 + 50 + 125 = 176
102 = 2 + 25 = 27
10 = 5
136/5=27/5 = 5

length 1: 0-4
length 2: 5-24
length 3: 25-124
length 4: 

 101
1010

output:
   nucleotide composition of repeated sequence
   coordinates of repeated sequence (start, stop)
   number of repeated sequences that occur
   display location of repeated sequence (intergenic, gene[intron/exon])
      if in intron/exon, report what number the intron/exon is in the list
      // go through the exon array list. If we pass the repeated sequence, it's in an intron at the number of the increment (for bio purposes)
      // If we find the repeated sequence in an exon, it's the number of the increment + 1 (for bio purposes)
      // if the repeated sequence starts before an exon value, but goes through or ends in an exon, report intron, exon, and possible followings
      // we would need a start and stop boolean to facilitate accurate searching. start is when we find the proper start location and we push values into a return array list. stop is when we find the proper stop location and we finish the search and return the array list.
      // the arraylist should contain strings as "[intron|exon] #"

