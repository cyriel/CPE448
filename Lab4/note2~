string[0:] -> string[1:] -> ... -> string[n:]

// n^2 algorithm: (n+1)(n)/2
// naive algorithm, but easiest to write.
void genST(Node node, String str) {
   if (!node.contains(str.get(0)))
      node.makeNode(str.get(0));    //increment children, sets hasChildren to true, sets hasChildX() to true where x == str.get(0)
   genST(node.get(str.get(0)),str.substring(1));
   genST(node,str.substring(1));
}


class Node {

   /*
    * assuming the Node class has the functions:
    *    hasChildren(): returns true if node has children
    *    hasChildX(): X is A,T,G,C. returns true if that child exists
    *    numChildren(): returns number of children
    *
    * assuming the Node class has the variables:
    *    String string: the string built at the current node
    */
   
   // GET REPeating SUBSTRing
   public ArrayList<StrnCnt> getMaxRepStr(Node node) {
      ArrayList<StrnCnt> ret = new ArrayList<StrnCnt>();
      
      
      if (!hasChildren())  // leaf node
         return ret;

      // gets substring and count from each child
      if (hasChildA())
         ret.addAll(getMaxRepStr(childA));
      if (hasChildT())
         ret.addAll(getMaxRepStr(childT));
      if (hasChildG())
         ret.addAll(getMaxRepStr(childG));
      if (hasChildC())
         ret.addAll(getMaxRepStr(childC));
      
      // if all children are leafs, they added nothing to the ArrayList
      // therefore the current node is not a leaf and is the longest substring here
      if (ret.isEmpty()) {
         ret.add(new StrnCnt(sequence, numChildren()));
      }
      
      return ret;
   }
}
final class StrnCnt {
   final String str;
   final int count;
   
   public Strnlen(String str, int count) {
      this.str = str;
      this.count = count;
   }
}
